/*
 generated file
 */
import * as request from 'superagent';
import * as _ from 'lodash';
import * as pathToRegexp from 'path-to-regexp';
import { Request } from 'express';
//
import { RouteInfo } from './route-info';

export class <%- className %> {
    private readonly endpoint = '<%= url %>';

    private getURL = (api: string): string => {
        // validate one '/' between path and endpoint
        if ((api[0] == '/') && (this.endpoint[this.endpoint.length-1] == '/')) {
            api = api.slice(1);
        }
        if ((api[0] !== '/') && (this.endpoint[this.endpoint.length-1] !== '/')) {
            api += '/';
        }
        return this.endpoint + api
        };
    pathMap: { [path: string]: RouteInfo; } = {};

    constructor() {
        this.initPathMap();
    }

    private initPathMap() {
        <% for (item in routeMap) { %>
         this.addPathToMap('<%= routeMap[item].gateWayPath %>', {gateWayPath: '<%= routeMap[item].gateWayPath %>',
                            microServicePath: '<%= routeMap[item].microServicePath %>',
                            methods: [ <% routeMap[item].methods.forEach(function(method) { %>'<%= method %>',<% }); %> ] }); 
         <% }; %>
    }

    private addPathToMap(gateWayPath: string, routeInfo: RouteInfo) {
        if (!this.pathMap.hasOwnProperty(gateWayPath)) {
            this.pathMap[gateWayPath] = routeInfo;
        }
    }

    private getTargetFullPath(gateWayPath: string, req: Request) {
        if (!this.pathMap.hasOwnProperty(gateWayPath)) {
            throw new Error(`${gateWayPath} doesn't exist.`);
        }
        const compilePath = pathToRegexp.compile(this.pathMap[gateWayPath].microServicePath);
        const finalPath = compilePath(req.params);
        return this.getURL(finalPath
    }

    get(gateWayPath: string, req: Request) {
        return request
            .get(this.getTargetFullPath(gateWayPath, req))
            .set('Accept', 'application/json')
            .then(res => {
                return res.body;
            });
    }

    post(gateWayPath: string, req: Request): Promise<any> {
        return request
            .post(this.getTargetFullPath(gateWayPath, req))
            .set('Accept', 'application/json')
            .send(req.body)
            .then(res => {
                return res.body;
            });
    }

    put(gateWayPath: string, req: Request): Promise<any> {
        return request
            .put(this.getTargetFullPath(gateWayPath, req))
            .set('Accept', 'application/json')
            .send(req.body)
            .then(res => {
                return res.body;
            });
    }

    delete(gateWayPath: string, req: Request): Promise<any> {
        return request
            .delete(this.getTargetFullPath(gateWayPath, req))
            .set('Accept', 'application/json')
            .send(req.body)
            .then(res => {
                return res.body;
            });
    }
}
