/*
 generated file
 */
import * as request from 'superagent';
import * as _ from 'lodash';

export class <%- className %> {
    private readonly endpoint = '<%= url %>';

    private getURL = (api: string): string => this.endpoint + api;
    pathMap: { [path: string]: string; } = {};

    constructor() {
        this.initPathMap();
    }

    private convertPathToPropName(path: string) {
        if (_.isEmpty(path)) {
            throw new Error(`path arg. can't be empty`);
        }
        return (path).replace(/[\/:]/g, '_');
    }

    private initPathMap() {<% routeMap.forEach(function(item){ %>
        this.addPathToMap('<%= item.destination %>', '<%= item.source %>');<% }); %>
    }

    private addPathToMap(sourcePath: string, targetPath: string) {
        const key = this.convertPathToPropName(sourcePath);
        if (!this.pathMap.hasOwnProperty(key)) {
            this.pathMap[key] = targetPath;
        }
    }

    private getTargetFullPath(sourcePath: string) {
        const key = this.convertPathToPropName(sourcePath);
        if (!this.pathMap.hasOwnProperty(key)) {
            throw new Error(`${sourcePath} doesn't exist.`);
        }
        return this.getURL(this.pathMap[key]);
    }

    get(sourcePath: string) {
        return request
            .get(this.getTargetFullPath(sourcePath))
            .set('Accept', 'application/json')
            .on('error', err => {
                console.error('error', err);
            })
            .then(res => {
                return res.body;
            });
    }
}
